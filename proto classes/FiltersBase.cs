// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FiltersBase.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PreobrCalc.FiltersBase {

  /// <summary>Holder for reflection information generated from FiltersBase.proto</summary>
  public static partial class FiltersBaseReflection {

    #region Descriptor
    /// <summary>File descriptor for FiltersBase.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FiltersBaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFGaWx0ZXJzQmFzZS5wcm90byJjCgZGaWx0ZXISFgoGUG9pbnRzGAEgAygL",
            "MgYuUG9pbnQSDAoETmFtZRgCIAEoCRIRCglpc1R1bmFibGUYAyABKAgSEgoK",
            "Q2VudGVyRnJlcRgEIAEoARIMCgRCYW5kGAUgASgBIiIKBVBvaW50EgwKBEZy",
            "ZXEYASABKAESCwoDQXR0GAIgASgBIicKC0ZpbHRlcnNCYXNlEhgKB0ZpbHRl",
            "cnMYASADKAsyBy5GaWx0ZXJCG0gDqgIWUHJlb2JyQ2FsYy5GaWx0ZXJzQmFz",
            "ZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PreobrCalc.FiltersBase.Filter), global::PreobrCalc.FiltersBase.Filter.Parser, new[]{ "Points", "Name", "IsTunable", "CenterFreq", "Band" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PreobrCalc.FiltersBase.Point), global::PreobrCalc.FiltersBase.Point.Parser, new[]{ "Freq", "Att" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PreobrCalc.FiltersBase.FiltersBase), global::PreobrCalc.FiltersBase.FiltersBase.Parser, new[]{ "Filters" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Filter : pb::IMessage<Filter> {
    private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Filter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PreobrCalc.FiltersBase.FiltersBaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter(Filter other) : this() {
      points_ = other.points_.Clone();
      name_ = other.name_;
      isTunable_ = other.isTunable_;
      centerFreq_ = other.centerFreq_;
      band_ = other.band_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Filter Clone() {
      return new Filter(this);
    }

    /// <summary>Field number for the "Points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PreobrCalc.FiltersBase.Point> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::PreobrCalc.FiltersBase.Point.Parser);
    private readonly pbc::RepeatedField<global::PreobrCalc.FiltersBase.Point> points_ = new pbc::RepeatedField<global::PreobrCalc.FiltersBase.Point>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PreobrCalc.FiltersBase.Point> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isTunable" field.</summary>
    public const int IsTunableFieldNumber = 3;
    private bool isTunable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTunable {
      get { return isTunable_; }
      set {
        isTunable_ = value;
      }
    }

    /// <summary>Field number for the "CenterFreq" field.</summary>
    public const int CenterFreqFieldNumber = 4;
    private double centerFreq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CenterFreq {
      get { return centerFreq_; }
      set {
        centerFreq_ = value;
      }
    }

    /// <summary>Field number for the "Band" field.</summary>
    public const int BandFieldNumber = 5;
    private double band_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Band {
      get { return band_; }
      set {
        band_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Filter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Filter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      if (Name != other.Name) return false;
      if (IsTunable != other.IsTunable) return false;
      if (CenterFreq != other.CenterFreq) return false;
      if (Band != other.Band) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsTunable != false) hash ^= IsTunable.GetHashCode();
      if (CenterFreq != 0D) hash ^= CenterFreq.GetHashCode();
      if (Band != 0D) hash ^= Band.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsTunable != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsTunable);
      }
      if (CenterFreq != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(CenterFreq);
      }
      if (Band != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Band);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsTunable != false) {
        size += 1 + 1;
      }
      if (CenterFreq != 0D) {
        size += 1 + 8;
      }
      if (Band != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Filter other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsTunable != false) {
        IsTunable = other.IsTunable;
      }
      if (other.CenterFreq != 0D) {
        CenterFreq = other.CenterFreq;
      }
      if (other.Band != 0D) {
        Band = other.Band;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsTunable = input.ReadBool();
            break;
          }
          case 33: {
            CenterFreq = input.ReadDouble();
            break;
          }
          case 41: {
            Band = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Point : pb::IMessage<Point> {
    private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Point> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PreobrCalc.FiltersBase.FiltersBaseReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point(Point other) : this() {
      freq_ = other.freq_;
      att_ = other.att_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Point Clone() {
      return new Point(this);
    }

    /// <summary>Field number for the "Freq" field.</summary>
    public const int FreqFieldNumber = 1;
    private double freq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Freq {
      get { return freq_; }
      set {
        freq_ = value;
      }
    }

    /// <summary>Field number for the "Att" field.</summary>
    public const int AttFieldNumber = 2;
    private double att_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Att {
      get { return att_; }
      set {
        att_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Point);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Point other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Freq != other.Freq) return false;
      if (Att != other.Att) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Freq != 0D) hash ^= Freq.GetHashCode();
      if (Att != 0D) hash ^= Att.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Freq != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Freq);
      }
      if (Att != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Att);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Freq != 0D) {
        size += 1 + 8;
      }
      if (Att != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Point other) {
      if (other == null) {
        return;
      }
      if (other.Freq != 0D) {
        Freq = other.Freq;
      }
      if (other.Att != 0D) {
        Att = other.Att;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Freq = input.ReadDouble();
            break;
          }
          case 17: {
            Att = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FiltersBase : pb::IMessage<FiltersBase> {
    private static readonly pb::MessageParser<FiltersBase> _parser = new pb::MessageParser<FiltersBase>(() => new FiltersBase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FiltersBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PreobrCalc.FiltersBase.FiltersBaseReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FiltersBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FiltersBase(FiltersBase other) : this() {
      filters_ = other.filters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FiltersBase Clone() {
      return new FiltersBase(this);
    }

    /// <summary>Field number for the "Filters" field.</summary>
    public const int FiltersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::PreobrCalc.FiltersBase.Filter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(10, global::PreobrCalc.FiltersBase.Filter.Parser);
    private readonly pbc::RepeatedField<global::PreobrCalc.FiltersBase.Filter> filters_ = new pbc::RepeatedField<global::PreobrCalc.FiltersBase.Filter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PreobrCalc.FiltersBase.Filter> Filters {
      get { return filters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FiltersBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FiltersBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!filters_.Equals(other.filters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= filters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      filters_.WriteTo(output, _repeated_filters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += filters_.CalculateSize(_repeated_filters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FiltersBase other) {
      if (other == null) {
        return;
      }
      filters_.Add(other.filters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
